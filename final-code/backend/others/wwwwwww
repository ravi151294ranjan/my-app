#!/usr/bin/env node

/**
 * Module dependencies.
 */

 var app = require('../app');       // Socket added
// var app = require('../app').app;
// var cluster = require('cluster');
var debug = require('debug')('express-generator:server');
var http = require('http');
var numCPUs = require('os').cpus().length;
var socketmodel = require('../models/socketModel')

var mongoConn=require("../config/dbConfig")
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);




/**
 * Create HTTP server.
 */


var https = require('https');
var fs = require('fs');

var privateKey  = fs.readFileSync('/home/elearning/NetApp/Testing/Server/bin/key.pem', 'utf8');
var certificate = fs.readFileSync('/home/elearning/NetApp/Testing/Server/bin/cert.pem', 'utf8');

// var privateKey  = fs.readFileSync('/Users/pradep/Desktop/NetApp/NetApp_PWA/Server/bin/key.pem', 'utf8');
// var certificate = fs.readFileSync('/Users/pradep/Desktop/NetApp/NetApp_PWA/Server/bin/cert.pem', 'utf8');

var credentials = {key: privateKey, cert: certificate};
console.log(credentials)
var server = https.createServer(credentials,app);


// Socket added
//var server = require('../app').server;  

/**
 * Listen on provided port, on all network interfaces.
 */
console.log( process.env.IP_ADDRESS)
server.listen(port, process.env.IP_ADDRESS);
server.on('error', onError);
server.on('listening', onListening);

const WebSocket = require('ws');
const wss = new WebSocket.Server({ server });
wss.on('connection', function connection(ws) {
  ws.on('addWebGlReportData_server', function incoming(message) {
    console.log('received: %s', message);
  });

  ws.send('something');
});



// }
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log("Server started on "+process.env.IP_ADDRESS+":"+port);

  app.startMongoDB();
}
